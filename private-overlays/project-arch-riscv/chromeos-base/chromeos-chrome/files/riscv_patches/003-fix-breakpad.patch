Index: src/third_party/lss/linux_syscall_support.h
===================================================================
--- src.orig/third_party/lss/linux_syscall_support.h
+++ src/third_party/lss/linux_syscall_support.h
@@ -87,7 +87,7 @@
  * Porting to other related platforms should not be difficult.
  */
 #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) ||   \
-     defined(__mips__) || defined(__PPC__) || defined(__ARM_EABI__) || \
+     defined(__mips__) || defined(__PPC__) || defined(__ARM_EABI__) || defined(__riscv) || \
      defined(__aarch64__) || defined(__s390__)) || defined(__e2k__)  \
   && (defined(__linux) || defined(__ANDROID__))
 
@@ -542,7 +542,7 @@ struct kernel_stat {
   int                st_blocks;
   int                st_pad4[14];
 };
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || (defined(__riscv) && defined(__LP64__))
 struct kernel_stat {
   unsigned long      st_dev;
   unsigned long      st_ino;
@@ -727,6 +727,21 @@ struct kernel_statfs {
   unsigned int       f_flags;
   unsigned int       f_spare[4];
 };
+#elif (defined(__riscv) && defined(__LP64__))
+struct kernel_statfs {
+  unsigned long      f_type;
+  unsigned long      f_bsize;
+  unsigned long      f_blocks;
+  unsigned long      f_bfree;
+  unsigned long      f_bavail;
+  unsigned long      f_files;
+  unsigned long      f_ffree;
+  struct { int val[2]; } f_fsid;
+  unsigned long      f_namelen;
+  unsigned long      f_frsize;
+  unsigned long      f_flags;
+  unsigned long      f_spare[4];
+};
 #else
 struct kernel_statfs {
   unsigned long      f_type;
@@ -1110,7 +1125,7 @@ struct kernel_statfs {
 #define __NR_getrandom          (__NR_SYSCALL_BASE + 384)
 #endif
 /* End of ARM 3/EABI definitions                                             */
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || (defined(__riscv) && defined(__LP64__)) 
 #ifndef __NR_setxattr
 #define __NR_setxattr             5
 #endif
@@ -1926,7 +1941,7 @@ struct kernel_statfs {
   #undef  LSS_RETURN
   #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) \
        || defined(__ARM_EABI__) || defined(__aarch64__) || defined(__s390__)) \
-       || defined(__e2k__)
+       || defined(__e2k__) || defined(__riscv)
   /* Failing system calls return a negative result in the range of
    * -1..-4095. These are "errno" values with the sign inverted.
    */
@@ -2879,6 +2894,124 @@ struct kernel_statfs {
       }
       LSS_RETURN(int, __res);
     }
+  #elif defined(__riscv) && defined(__LP64__)
+    #undef LSS_REG
+    #define LSS_REG(r,a) register long int __a##r asm ("a"#r) =               \
+                                 (long int)(a)
+    #undef LSS_BODY
+    #define ASM_ARGS_0
+    #define ASM_ARGS_1
+    #define ASM_ARGS_2 , "r" (__a1)
+    #define ASM_ARGS_3 ASM_ARGS_2, "r" (__a2)
+    #define ASM_ARGS_4 ASM_ARGS_3, "r" (__a3)
+    #define ASM_ARGS_5 ASM_ARGS_4, "r" (__a4)
+    #define ASM_ARGS_6 ASM_ARGS_5, "r" (__a5)
+
+    #define LSS_BODY(type,name, nr) \
+    	  register int64_t __a7 __asm__("a7") =  __NR_##name;                   \
+          int64_t __res;                                                     \
+	  __asm__ __volatile__(                                                  \
+	  "scall\n\t"                                                         \
+	  : "+r" (__a0)                                                       \
+	  : "r" (__a7) ASM_ARGS_##nr                                          \
+	  : "memory");                                                        \
+	  __res = __a0;                                                       \
+	  LSS_RETURN(type, __res)
+    #undef _syscall0
+    #define _syscall0(type, name)                                             \
+      type LSS_NAME(name)(void) {                                             \
+        register int64_t __a0 __asm__("a0");                                    \
+        LSS_BODY(type, name, 0);                                                 \
+      }
+    #undef _syscall1
+    #define _syscall1(type, name, type1, arg1)                                \
+      type LSS_NAME(name)(type1 arg1) {                                       \
+        LSS_REG(0, arg1); LSS_BODY(type, name, 1);                            \
+      }
+    #undef _syscall2
+    #define _syscall2(type, name, type1, arg1, type2, arg2)                   \
+      type LSS_NAME(name)(type1 arg1, type2 arg2) {                           \
+        LSS_REG(0, arg1); LSS_REG(1, arg2);                                   \
+        LSS_BODY(type, name, 2);                                              \
+      }
+    #undef _syscall3
+    #define _syscall3(type, name, type1, arg1, type2, arg2, type3, arg3)      \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3) {               \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_BODY(type, name, 3);                                              \
+      }
+	#undef _syscall4
+    #define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)  \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {   \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4);                                                     \
+        LSS_BODY(type, name, 4);										      \
+      }
+    #undef _syscall5
+    #define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,  \
+                      type5,arg5)                                             \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                          type5 arg5) {                                       \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4); LSS_REG(4, arg5);                                   \
+        LSS_BODY(type, name, 5);											  \
+      }
+    #undef _syscall6
+    #define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,  \
+                      type5,arg5,type6,arg6)                                  \
+      type LSS_NAME(name)(type1 arg1, type2 arg2, type3 arg3, type4 arg4,     \
+                          type5 arg5, type6 arg6) {                           \
+        LSS_REG(0, arg1); LSS_REG(1, arg2); LSS_REG(2, arg3);                 \
+        LSS_REG(3, arg4); LSS_REG(4, arg5); LSS_REG(5, arg6);                 \
+        LSS_BODY(type, name, 6);											  \
+      }
+
+    LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
+                                   int flags, void *arg, int *parent_tidptr,
+                                   void *newtls, int *child_tidptr) {
+      int64_t __res;
+      if (fn == NULL || child_stack == NULL) {
+        __res = -EINVAL;
+        LSS_RETURN(int, __res);
+      }
+      {
+        uintptr_t* cstack = (uintptr_t*)child_stack - 2;
+        cstack[0] = (uintptr_t)fn;
+        cstack[1] = (uintptr_t)arg;
+        child_stack = cstack;
+      }
+      {
+        register uint64_t __flags __asm__("a0") = flags;
+        register void *__stack __asm__("a1") = child_stack;
+        register void *__ptid __asm__("a2") = parent_tidptr;
+        register void *__tls __asm__("a3") = newtls;
+        register void *__ctid __asm__("a4") = child_tidptr;
+        __asm__ __volatile__(
+            /* call syscall clone */
+            "li a7, %1\n"
+            "scall\n"
+            /* if (a0 != 0)
+             *   return %r0;
+             */
+            "bltz a0, 1f\n"
+            /* In the child , Call fn(arg) */
+            ".cfi_label .Ldummy\n"
+            "cfi_undefined (ra)\n"
+            "REG_L   a1,0(sp)\n"
+            "REG_L   a0,SZREG(sp)\n"
+            "jalr    a1\n"
+            /* Call exit with the function's return value. */
+            "li a7, %2\n"
+            "scall\n"
+          "1:\n"
+            : "=r" (__res)
+            : "i"(__NR_clone), "i"(__NR_exit), "r"(__flags), "r"(__stack),
+              "r"(__ptid), "r"(__tls), "r"(__ctid)
+            : "cc", "a7", "ra", "memory");
+      }
+	  LSS_RETURN(int, __res);
+	}
+
   #elif defined(__mips__)
     #undef LSS_REG
     #define LSS_REG(r,a) register unsigned long __r##r __asm__("$"#r) =       \
@@ -4484,7 +4617,7 @@ struct kernel_statfs {
       LSS_SC_BODY(4, int, 8, d, type, protocol, sv);
     }
   #endif
-  #if defined(__ARM_EABI__) || defined (__aarch64__)
+  #if defined(__ARM_EABI__) || defined (__aarch64__) || defined(__riscv)
     LSS_INLINE _syscall3(ssize_t, recvmsg, int, s, struct kernel_msghdr*, msg,
                          int, flags)
     LSS_INLINE _syscall3(ssize_t, sendmsg, int, s, const struct kernel_msghdr*,
@@ -4831,6 +4964,21 @@ struct kernel_statfs {
     LSS_BODY(pid_t, clone, "r"(__r0), "r"(__r1), "r"(__r2), "r"(__r3),
              "r"(__r4));
   }
+# elif defined(__riscv)
+  LSS_INLINE pid_t LSS_NAME(fork)(void) {
+    int flags = 0x00000100 | 0x00004000 | SIGCHLD;
+    void *child_stack = NULL;
+    void *parent_tidptr = NULL;
+    void *newtls = NULL;
+    void *child_tidptr = NULL;
+
+    LSS_REG(0, flags);
+    LSS_REG(1, child_stack);
+    LSS_REG(2, parent_tidptr);
+    LSS_REG(3, newtls);
+    LSS_REG(4, child_tidptr);
+    LSS_BODY(pid_t, clone, 5);
+  }
 # elif defined(__x86_64__)
   LSS_INLINE pid_t LSS_NAME(fork)(void) {
     // Android disallows the fork syscall on x86_64 - implement by means of the
Index: src/third_party/breakpad/breakpad/src/common/linux/memory_mapped_file.cc
===================================================================
--- src.orig/third_party/breakpad/breakpad/src/common/linux/memory_mapped_file.cc
+++ src/third_party/breakpad/breakpad/src/common/linux/memory_mapped_file.cc
@@ -65,7 +65,7 @@ bool MemoryMappedFile::Map(const char* p
   }
 
 #if defined(__x86_64__) || defined(__aarch64__) || \
-   (defined(__mips__) && _MIPS_SIM == _ABI64)
+   (defined(__mips__) && _MIPS_SIM == _ABI64) || defined(__riscv)
 
   struct kernel_stat st;
   if (sys_fstat(fd, &st) == -1 || st.st_size < 0) {
Index: src/third_party/breakpad/breakpad/src/common/linux/breakpad_getcontext.S
===================================================================
--- src.orig/third_party/breakpad/breakpad/src/common/linux/breakpad_getcontext.S
+++ src/third_party/breakpad/breakpad/src/common/linux/breakpad_getcontext.S
@@ -175,6 +175,66 @@ breakpad_getcontext:
   .cfi_endproc
   .size breakpad_getcontext, . - breakpad_getcontext
 
+#elif defined(__riscv) && defined(__LP64__)
+  
+#define  _NSIG                       64
+#define  __NR_rt_sigprocmask         135
+
+  .text
+  .global breakpad_getcontext
+  .hidden breakpad_getcontext
+  .type breakpad_getcontext, function
+  .align 4
+  .cfi_startproc
+breakpad_getcontext:
+   
+  sd x5, RISCV_GREG_OFFSET(0)(a0)
+  sd x8, RISCV_GREG_OFFSET(1)(a0)
+  sd x9, RISCV_GREG_OFFSET(2)(a0)
+  sd x18, RISCV_GREG_OFFSET(3)(a0)
+  sd x19, RISCV_GREG_OFFSET(4)(a0)
+  sd x20, RISCV_GREG_OFFSET(5)(a0)
+  sd x21, RISCV_GREG_OFFSET(6)(a0)
+  sd x22, RISCV_GREG_OFFSET(7)(a0)
+  sd x23, RISCV_GREG_OFFSET(8)(a0)
+  sd x24, RISCV_GREG_OFFSET(9)(a0)
+  sd x25, RISCV_GREG_OFFSET(10)(a0)
+  sd x26, RISCV_GREG_OFFSET(11)(a0)
+  sd x27, RISCV_GREG_OFFSET(12)(a0)
+  sd ra, RISCV_GREG_OFFSET(13)(a0)
+  sd sp, RISCV_GREG_OFFSET(14)(a0)
+  sd gp, RISCV_GREG_OFFSET(15)(a0)
+  sd tp, RISCV_GREG_OFFSET(16)(a0)
+  auipc x28, 0x0
+  sd x28, RISCV_GREG_OFFSET(17)(a0)
+#ifdef __riscv_float_abi_double
+  fsd f8, RISCV_FPREGS_OFFSET(0)(a0)
+  fsd f9, RISCV_FPREGS_OFFSET(1)(a0)
+  fsd f18, RISCV_FPREGS_OFFSET(2)(a0)
+  fsd f19, RISCV_FPREGS_OFFSET(3)(a0)
+  fsd f20, RISCV_FPREGS_OFFSET(4)(a0)
+  fsd f21, RISCV_FPREGS_OFFSET(5)(a0)
+  fsd f22, RISCV_FPREGS_OFFSET(6)(a0)
+  fsd f23, RISCV_FPREGS_OFFSET(7)(a0)
+  fsd f24, RISCV_FPREGS_OFFSET(8)(a0)
+  fsd f25, RISCV_FPREGS_OFFSET(9)(a0)
+  fsd f26, RISCV_FPREGS_OFFSET(10)(a0)
+  fsd f27, RISCV_FPREGS_OFFSET(11)(a0)
+  frcsr x28
+  sw x28, MCONTEXT_FPC_CSR(a0) 
+#endif
+  li a7, __NR_rt_sigprocmask
+  ld a2, UCONTEXT_SIGMASK_OFFSET(a0)
+  mv a0, x0
+  mv a1, x0
+  li a3, (_NSIG / 8)
+  scall
+  mv a0, x0
+  ret
+
+  .cfi_endproc
+  .size breakpad_getcontext, . - breakpad_getcontext
+
 #elif defined(__i386__)
 
   .text
Index: src/third_party/breakpad/breakpad/src/common/linux/ucontext_constants.h
===================================================================
--- src.orig/third_party/breakpad/breakpad/src/common/linux/ucontext_constants.h
+++ src/third_party/breakpad/breakpad/src/common/linux/ucontext_constants.h
@@ -68,6 +68,14 @@
 #define  REGISTER_SIZE               8
 #define  SIMD_REGISTER_SIZE          16
 
+#elif defined(__riscv) && defined(__LP64__)
+#define UCONTEXT_SIGMASK_OFFSET      40
+#define MCONTEXT_GREGS_OFFSET        168
+#define RISCV_GREG_OFFSET(x)         (MCONTEXT_GREGS_OFFSET + x*8)
+#define MCONTEXT_FPREGS_OFFSET       424
+#define RISCV_FPREGS_OFFSET(x)       (MCONTEXT_FPREGS_OFFSET + x*8)
+#define MCONTEXT_FPC_CSR             680
+
 #elif defined(__i386__)
 
 #define  MCONTEXT_GREGS_OFFSET     20

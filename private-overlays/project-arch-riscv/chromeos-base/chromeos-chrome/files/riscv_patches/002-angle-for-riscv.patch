Index: src/skia/BUILD.gn
===================================================================
--- src.orig/skia/BUILD.gn
+++ src/skia/BUILD.gn
@@ -825,6 +825,8 @@ skia_source_set("skia_opts") {
     sources = skia_opts.none_sources
   } else if (current_cpu == "s390x") {
     sources = skia_opts.none_sources
+  } else if (current_cpu == "riscv64") {
+    sources = skia_opts.none_sources
   } else {
     assert(false, "Need to port cpu specific stuff from skia_library_opts.gyp")
   }
Index: src/third_party/angle/gni/angle.gni
===================================================================
--- src.orig/third_party/angle/gni/angle.gni
+++ src/third_party/angle/gni/angle.gni
@@ -72,7 +72,7 @@ declare_args() {
 
   if (current_cpu == "arm64" || current_cpu == "x64" ||
       current_cpu == "mips64el" || current_cpu == "s390x" ||
-      current_cpu == "ppc64") {
+      current_cpu == "riscv64" || current_cpu == "ppc64") {
     angle_64bit_current_cpu = true
   } else if (current_cpu == "arm" || current_cpu == "x86" ||
              current_cpu == "mipsel" || current_cpu == "s390" ||
Index: src/third_party/skia/gn/shared_sources.gni
===================================================================
--- src.orig/third_party/skia/gn/shared_sources.gni
+++ src/third_party/skia/gn/shared_sources.gni
@@ -28,4 +28,5 @@ skia_opts = {
   avx_sources = avx
   hsw_sources = hsw
   skx_sources = skx
+  riscv64_sources = none
 }
Index: src/third_party/skia/tools/skqp/gn_to_bp.py
===================================================================
--- src.orig/third_party/skia/tools/skqp/gn_to_bp.py
+++ src/third_party/skia/tools/skqp/gn_to_bp.py
@@ -96,6 +96,11 @@ cc_library_shared {
                 $x86_srcs
             ],
         },
+        riscv64: {
+            srcs: [
+                $none_srcs
+            ],
+        },
     },
 
     shared_libs: [
Index: src/ppapi/native_client/src/untrusted/pnacl_support_extension/BUILD.gn
===================================================================
--- src.orig/ppapi/native_client/src/untrusted/pnacl_support_extension/BUILD.gn
+++ src/ppapi/native_client/src/untrusted/pnacl_support_extension/BUILD.gn
@@ -55,6 +55,8 @@ action("pnacl_support_extension") {
     output_cpu = "x86_64"
   } else if (target_cpu == "x86") {
     output_cpu = "x86_32"
+  } else if (target_cpu == "riscv64")
+    output_cpu = "riscv64"
   } else {
     assert(false, "unhandled target_cpu")
   }
Index: src/third_party/swiftshader/third_party/marl/src/osfiber_asm_riscv64.h
===================================================================
--- /dev/null
+++ src/third_party/swiftshader/third_party/marl/src/osfiber_asm_riscv64.h
@@ -0,0 +1,157 @@
+// Copyright 2021 The FydeOS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+// Author: Yang Tsao<yang@fydeos.io>
+
+#define MARL_REG_A0 0x00
+#define MARL_REG_A1 0x08
+#define MARL_REG_T0 0x10
+#define MARL_REG_X5 MARL_REG_T0
+#define MARL_REG_S0 0x18 /*frame-pointer*/
+#define MARL_REG_X8 MARL_REG_S0
+#define MARL_REG_S1 0x20
+#define MARL_REG_X9 MARL_REG_S1
+#define MARL_REG_S2 0x28
+#define MARL_REG_X18 MARL_REG_S2
+#define MARL_REG_S3 0x30
+#define MARL_REG_X19 MARL_REG_S3
+#define MARL_REG_S4 0x38
+#define MARL_REG_X20 MARL_REG_S4
+#define MARL_REG_S5 0x40
+#define MARL_REG_X21 MARL_REG_S5
+#define MARL_REG_S6 0x48
+#define MARL_REG_X22 MARL_REG_S6
+#define MARL_REG_S7 0x50
+#define MARL_REG_X23 MARL_REG_S7
+#define MARL_REG_S8 0x58
+#define MARL_REG_X24 MARL_REG_S8
+#define MARL_REG_S9 0x60
+#define MARL_REG_X25 MARL_REG_S9
+#define MARL_REG_S10 0x68
+#define MARL_REG_X26 MARL_REG_S10
+#define MARL_REG_S11 0x70
+#define MARL_REG_X27 MARL_REG_S11
+#define MARL_REG_RA 0x78
+#define MARL_REG_X1 MARL_REG_RA
+#define MARL_REG_SP 0x80
+#define MARL_REG_X2 MARL_REG_SP
+#define MARL_REG_GP 0x88
+#define MARL_REG_X3 MARL_REG_GP
+#define MARL_REG_TP 0x90
+#define MARL_REG_X4 MARL_REG_TP
+
+#ifdef __riscv_float_abi_double
+#define MARL_REG_F8 0x98
+#define MARL_REG_F9 0xa0
+#define MARL_REG_F18 0xa8
+#define MARL_REG_F19 0xb0
+#define MARL_REG_F20 0xb8
+#define MARL_REG_F21 0xc0
+#define MARL_REG_F22 0xc8
+#define MARL_REG_F23 0xd0
+#define MARL_REG_F24 0xd8
+#define MARL_REG_F25 0xe0
+#define MARL_REG_F26 0xe8
+#define MARL_REG_F27 0xf0
+#endif
+
+#ifndef MARL_BUILD_ASM
+
+#include <stdint.h>
+
+struct marl_fiber_context {
+  uintptr_t a0;
+  uintptr_t a1;
+  uintptr_t x5;
+  uintptr_t x8;
+  uintptr_t x9;
+  uintptr_t x18;
+  uintptr_t x19;
+  uintptr_t x20;
+  uintptr_t x21;
+  uintptr_t x22;
+  uintptr_t x23;
+  uintptr_t x24;
+  uintptr_t x25;
+  uintptr_t x26;
+  uintptr_t x27;
+  uintptr_t ra;
+  uintptr_t sp;
+  uintptr_t gp;
+  uintptr_t tp;
+#ifdef __riscv_float_abi_double
+  uintptr_t f8;
+  uintptr_t f9;
+  uintptr_t f18;
+  uintptr_t f19;
+  uintptr_t f20;
+  uintptr_t f21;
+  uintptr_t f22;
+  uintptr_t f23;
+  uintptr_t f24;
+  uintptr_t f25;
+  uintptr_t f26;
+  uintptr_t f27;
+#endif
+};
+
+#ifdef __cplusplus
+#include <cstddef>
+static_assert(offsetof(marl_fiber_context, a0) == MARL_REG_A0,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, a1) == MARL_REG_A1,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x5) == MARL_REG_X5,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x8) == MARL_REG_X8,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x9) == MARL_REG_X9,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x18) == MARL_REG_X18,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x19) == MARL_REG_X19,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x20) == MARL_REG_X20,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x21) == MARL_REG_X21,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x22) == MARL_REG_X22,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x23) == MARL_REG_X23,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x24) == MARL_REG_X24,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x25) == MARL_REG_X25,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x26) == MARL_REG_X26,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, x27) == MARL_REG_X27,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, ra) == MARL_REG_X1,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, sp) == MARL_REG_X2,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, gp) == MARL_REG_X3,
+              "Bad register offset");
+static_assert(offsetof(marl_fiber_context, tp) == MARL_REG_X4,
+              "Bad register offset");
+
+#ifdef __riscv_float_abi_double
+#define ASSERT_FP(x) static_assert(offsetof(marl_fiber_context, f##x) \
+      == MARL_REG_F##x, "Bad register offset");
+ASSERT_FP(8)
+ASSERT_FP(9)
+ASSERT_FP(18)
+ASSERT_FP(19)
+ASSERT_FP(20)
+ASSERT_FP(21)
+ASSERT_FP(22)
+ASSERT_FP(23)
+ASSERT_FP(24)
+ASSERT_FP(25)
+ASSERT_FP(26)
+ASSERT_FP(27)
+#undef ASSERT_FP(x)
+#endif //__riscv_float_abi_double
+#endif // __cplusplus
+#endif  // MARL_BUILD_ASM
Index: src/third_party/swiftshader/third_party/marl/src/osfiber_asm_riscv64.S
===================================================================
--- /dev/null
+++ src/third_party/swiftshader/third_party/marl/src/osfiber_asm_riscv64.S
@@ -0,0 +1,96 @@
+// Copyright 2021 The FydeOS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+// Author: Yang Tsao<yang@fydeos.io>
+
+#if defined(__riscv)
+#define MARL_BUILD_ASM 1
+#include "osfiber_asm_riscv64.h"
+
+// void marl_fiber_swap(marl_fiber_context* from, const marl_fiber_context* to)
+// a0: from alias(x10)
+// a1: to alias(x11)
+
+.text
+.global marl_fiber_swap
+.align 4
+marl_fiber_swap:
+
+  // Save context 'from'
+  sd x5, MARL_REG_X5(a0)
+  sd x8, MARL_REG_X8(a0)
+  sd x9, MARL_REG_X9(a0)
+  sd x18, MARL_REG_X18(a0)
+  sd x19, MARL_REG_X19(a0)
+  sd x20, MARL_REG_X20(a0)
+  sd x21, MARL_REG_X21(a0)
+  sd x22, MARL_REG_X22(a0)
+  sd x23, MARL_REG_X23(a0)
+  sd x24, MARL_REG_X24(a0)
+  sd x25, MARL_REG_X25(a0)
+  sd x26, MARL_REG_X26(a0)
+  sd x27, MARL_REG_X27(a0)
+
+  sd ra, MARL_REG_RA(a0)
+  sd sp, MARL_REG_SP(a0)
+  sd gp, MARL_REG_GP(a0)
+  sd tp, MARL_REG_TP(a0)
+
+#ifdef __riscv_float_abi_double
+#define SAVE_FP(x) fsd f##x, MARL_REG_F##x(a0)
+  SAVE_FP(8)
+  SAVE_FP(9)
+  SAVE_FP(18)
+  SAVE_FP(19)
+  SAVE_FP(20)
+  SAVE_FP(21)
+  SAVE_FP(22)
+  SAVE_FP(23)
+  SAVE_FP(24)
+  SAVE_FP(25)
+  SAVE_FP(26)
+  SAVE_FP(27)
+#undef SAVE_FP(x)
+#endif //__riscv_float_abi_double
+#define LD_TAR(y) ld x##y, MARL_REG_X##y(a1)
+  LD_TAR(5)
+  LD_TAR(8)
+  LD_TAR(9)
+  LD_TAR(18)
+  LD_TAR(19)
+  LD_TAR(20)
+  LD_TAR(21)
+  LD_TAR(22)
+  LD_TAR(23)
+  LD_TAR(24)
+  LD_TAR(25)
+  LD_TAR(26)
+  LD_TAR(27)
+#undef LD_TAR(y)
+#ifdef __riscv_float_abi_double
+#define RESTORE_FP(x) fld f##x, MARL_REG_F##x(a1)
+  RESTORE_FP(8)
+  RESTORE_FP(9)
+  RESTORE_FP(18)
+  RESTORE_FP(19)
+  RESTORE_FP(20)
+  RESTORE_FP(21)
+  RESTORE_FP(22)
+  RESTORE_FP(23)
+  RESTORE_FP(24)
+  RESTORE_FP(25)
+  RESTORE_FP(26)
+  RESTORE_FP(27)
+#undef RESTORE_FP(x)
+#endif //__riscv_float_abi_double
+  ld tp, MARL_REG_TP(a1)
+  ld gp, MARL_REG_GP(a1)
+  ld sp, MARL_REG_SP(a1)
+  ld ra, MARL_REG_RA(a1)
+  ld a0, MARL_REG_A0(a1)
+  mv a2, a1
+  ld a1, MARL_REG_A1(a2)
+  li a2, 0
+  ret 
+
+#endif // defined(__riscv)
Index: src/third_party/swiftshader/third_party/marl/src/osfiber_riscv64.c
===================================================================
--- /dev/null
+++ src/third_party/swiftshader/third_party/marl/src/osfiber_riscv64.c
@@ -0,0 +1,30 @@
+// Copyright 2021 The FydeOS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+// Author: Yang Tsao<yang@fydeos.io>
+
+#if defined(__riscv)
+
+#include "osfiber_asm_riscv64.h"
+
+#include "marl/export.h"
+
+MARL_EXPORT
+void marl_fiber_trampoline(void (*target)(void*), void* arg) {
+  target(arg);
+}
+
+MARL_EXPORT
+void marl_fiber_set_target(struct marl_fiber_context* ctx,
+                           void* stack,
+                           uint32_t stack_size,
+                           void (*target)(void*),
+                           void* arg) {
+  uintptr_t* stack_top = (uintptr_t*)((uint8_t*)(stack) + stack_size);
+  ctx->ra = (uintptr_t)&marl_fiber_trampoline;
+  ctx->a0 = (uintptr_t)target;
+  ctx->a1 = (uintptr_t)arg;
+  ctx->sp = ((uintptr_t)stack_top) & ~(uintptr_t)15;
+}
+
+#endif  // defined(__riscv)
Index: src/third_party/swiftshader/third_party/marl/CMakeLists.txt
===================================================================
--- src.orig/third_party/swiftshader/third_party/marl/CMakeLists.txt
+++ src/third_party/swiftshader/third_party/marl/CMakeLists.txt
@@ -155,8 +155,10 @@ set(MARL_LIST
 if(NOT MSVC)
     list(APPEND MARL_LIST
         ${MARL_SRC_DIR}/osfiber_aarch64.c
+        ${MARL_SRC_DIR}/osfiber_riscv64.c
         ${MARL_SRC_DIR}/osfiber_arm.c
         ${MARL_SRC_DIR}/osfiber_asm_aarch64.S
+        ${MARL_SRC_DIR}/osfiber_asm_riscv64.S
         ${MARL_SRC_DIR}/osfiber_asm_arm.S
         ${MARL_SRC_DIR}/osfiber_asm_mips64.S
         ${MARL_SRC_DIR}/osfiber_asm_ppc64.S
@@ -172,6 +174,7 @@ if(NOT MSVC)
     # we treat assembly files as C files to work around this bug.
     set_source_files_properties(
         ${MARL_SRC_DIR}/osfiber_asm_aarch64.S
+        ${MARL_SRC_DIR}/osfiber_asm_riscv64.S
         ${MARL_SRC_DIR}/osfiber_asm_arm.S
         ${MARL_SRC_DIR}/osfiber_asm_mips64.S
         ${MARL_SRC_DIR}/osfiber_asm_ppc64.S
Index: src/third_party/swiftshader/third_party/marl/src/osfiber_asm.h
===================================================================
--- src.orig/third_party/swiftshader/third_party/marl/src/osfiber_asm.h
+++ src/third_party/swiftshader/third_party/marl/src/osfiber_asm.h
@@ -34,6 +34,8 @@
 #include "osfiber_asm_ppc64.h"
 #elif defined(__mips__) && _MIPS_SIM == _ABI64
 #include "osfiber_asm_mips64.h"
+#elif defined(__riscv) && __LP64__
+#include "osfiber_asm_riscv64.h"
 #else
 #error "Unsupported target"
 #endif
Index: src/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
===================================================================
--- src.orig/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
+++ src/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
@@ -151,6 +151,8 @@ swiftshader_llvm_source_set("swiftshader
     deps += [ ":swiftshader_llvm_ppc" ]
   } else if (current_cpu == "x86" || current_cpu == "x64") {
     deps += [ ":swiftshader_llvm_x86" ]
+  } else if (current_cpu == "riscv64") {
+    deps += [ ":swiftshader_llvm_riscv64" ]
   } else {
     assert(false, "Unsupported current_cpu")
   }
@@ -1062,6 +1064,42 @@ swiftshader_llvm_source_set("swiftshader
   ]
 }
 
+swiftshader_llvm_source_set("swiftshader_llvm_riscv64") {
+  sources = [
+    "llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp",
+    "llvm/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVInstPrinter.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp",
+    "llvm/lib/Target/RISCV/MCTargetDesc/RISCVTargetStreamer.cpp",
+    "llvm/lib/Target/RISCV/RISCVAsmPrinter.cpp",
+    "llvm/lib/Target/RISCV/RISCVCallLowering.cpp",
+    "llvm/lib/Target/RISCV/RISCVExpandPseudoInsts.cpp",
+    "llvm/lib/Target/RISCV/RISCVFrameLowering.cpp",
+    "llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp",
+    "llvm/lib/Target/RISCV/RISCVISelLowering.cpp",
+    "llvm/lib/Target/RISCV/RISCVInstrInfo.cpp",
+    "llvm/lib/Target/RISCV/RISCVInstructionSelector.cpp",
+    "llvm/lib/Target/RISCV/RISCVLegalizerInfo.cpp",
+    "llvm/lib/Target/RISCV/RISCVMCInstLower.cpp",
+    "llvm/lib/Target/RISCV/RISCVMergeBaseOffset.cpp",
+    "llvm/lib/Target/RISCV/RISCVRegisterBankInfo.cpp",
+    "llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp",
+    "llvm/lib/Target/RISCV/RISCVSubtarget.cpp",
+    "llvm/lib/Target/RISCV/RISCVTargetMachine.cpp",
+    "llvm/lib/Target/RISCV/RISCVTargetObjectFile.cpp",
+    "llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp",
+    "llvm/lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp",
+    "llvm/lib/Target/RISCV/Utils/RISCVBaseInfo.cpp",
+    "llvm/lib/Target/RISCV/Utils/RISCVMatInt.cpp",
+  ]
+}
+
 swiftshader_llvm_source_set("swiftshader_llvm_arm") {
   sources = [
     "llvm/lib/Target/ARM/A15SDOptimizer.cpp",
Index: src/build/build_config.h
===================================================================
--- src.orig/build/build_config.h
+++ src/build/build_config.h
@@ -197,6 +197,16 @@
 #define ARCH_CPU_32_BITS 1
 #define ARCH_CPU_BIG_ENDIAN 1
 #endif
+#elif defined(__riscv)
+#define ARCH_CPU_RISCV_FAMILY 1
+#define ARCH_CPU_LITTLE_ENDIAN 1
+#if defined(__LP64__)
+#define ARCH_CPU_RISCV64 1
+#define ARCH_CPU_64_BITS 1
+#else
+#define ARCH_CPU_RISCV32 1
+#define ARCH_CPU_32_BITS 1
+#endif
 #else
 #error Please add support for your architecture in build/build_config.h
 #endif
Index: src/build/config/compiler/BUILD.gn
===================================================================
--- src.orig/build/config/compiler/BUILD.gn
+++ src/build/config/compiler/BUILD.gn
@@ -908,6 +908,17 @@ config("compiler_cpu_abi") {
         cflags += [ "--target=aarch64-linux-gnu" ]
         ldflags += [ "--target=aarch64-linux-gnu" ]
       }
+    } else if (current_cpu == "riscv64") {
+      cflags += [ 
+        "--target=rv64gc", 
+        "-march=rv64gc",
+        "-mabi=lp64d",
+        ]
+      ldflags += [ 
+        "--target=rv64gc",
+        "-Wl,-melf64lriscv",
+        "-mabi=lp64d",
+        ]
     } else if (current_cpu == "mipsel" && !is_nacl) {
       ldflags += [ "-Wl,--hash-style=sysv" ]
       if (custom_toolchain == "") {
